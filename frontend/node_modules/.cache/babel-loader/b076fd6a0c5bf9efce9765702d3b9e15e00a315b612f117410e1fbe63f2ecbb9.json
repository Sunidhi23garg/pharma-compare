{"ast":null,"code":"// // src/api/axios.js\n// import axios from 'axios';\n\n// const instance = axios.create({\n//   baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n// });\n\n// instance.interceptors.request.use(\n//   (config) => {\n//     const token = localStorage.getItem('token');\n//     if (token) {\n//       config.headers['x-auth-token'] = token;\n//     }\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n\n// export default instance;\n\nimport axios from 'axios';\n\n// Create an Axios instance with a default baseURL and content-type header\nconst instance = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  // Using environment variable or fallback to local backend\n  headers: {\n    'Content-Type': 'application/json' // Default content type for the API\n  }\n});\n\n// Request interceptor to add token to request headers if available\ninstance.interceptors.request.use(config => {\n  // Get token from local storage if present\n  const token = localStorage.getItem('token');\n  if (token) {\n    // Add token to request headers\n    config.headers['x-auth-token'] = token;\n  }\n  return config;\n}, error => {\n  // Reject the promise with error if any occurs during the request setup\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle errors globally (Optional)\ninstance.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // Check for specific error responses and handle them (Optional)\n  if (error.response && error.response.status === 401) {\n    // Handle Unauthorized (e.g., token expired) here if needed\n    console.log('Unauthorized access - token expired or invalid');\n  }\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"names":["axios","instance","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","status","console","log"],"sources":["C:/Users/hp/OneDrive/Desktop/123/medlr/frontend/src/api/axios.js"],"sourcesContent":["// // src/api/axios.js\r\n// import axios from 'axios';\r\n\r\n// const instance = axios.create({\r\n//   baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\r\n//   headers: {\r\n//     'Content-Type': 'application/json',\r\n//   },\r\n// });\r\n\r\n// instance.interceptors.request.use(\r\n//   (config) => {\r\n//     const token = localStorage.getItem('token');\r\n//     if (token) {\r\n//       config.headers['x-auth-token'] = token;\r\n//     }\r\n//     return config;\r\n//   },\r\n//   (error) => {\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\n\r\n// export default instance;\r\n\r\n\r\nimport axios from 'axios';\r\n\r\n// Create an Axios instance with a default baseURL and content-type header\r\nconst instance = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api', // Using environment variable or fallback to local backend\r\n  headers: {\r\n    'Content-Type': 'application/json', // Default content type for the API\r\n  },\r\n});\r\n\r\n// Request interceptor to add token to request headers if available\r\ninstance.interceptors.request.use(\r\n  (config) => {\r\n    // Get token from local storage if present\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      // Add token to request headers\r\n      config.headers['x-auth-token'] = token;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    // Reject the promise with error if any occurs during the request setup\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle errors globally (Optional)\r\ninstance.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // Check for specific error responses and handle them (Optional)\r\n    if (error.response && error.response.status === 401) {\r\n      // Handle Unauthorized (e.g., token expired) here if needed\r\n      console.log('Unauthorized access - token expired or invalid');\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default instance;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC5BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;EAAE;EACvEC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB,CAAE;EACtC;AACF,CAAC,CAAC;;AAEF;AACAN,QAAQ,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAK;EACV;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACT;IACAD,MAAM,CAACJ,OAAO,CAAC,cAAc,CAAC,GAAGK,KAAK;EACxC;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACT;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAd,QAAQ,CAACO,YAAY,CAACU,QAAQ,CAACR,GAAG,CAC/BQ,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACT;EACA,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnD;IACAC,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;EAC/D;EACA,OAAOL,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAed,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}